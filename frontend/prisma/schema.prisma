// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    created_at        Int?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    WatchHistory  WatchHistory?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model MediaIds {
    id    String  @id @default(cuid())
    trakt Int
    tvdb  Int?
    imdb  String?
    tmdb  Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    mediaType MediaType
    Media     Media?

    @@unique([trakt, mediaType])
}

enum MediaType {
    MOVIE
    SHOW
    ACTOR
}

model Media {
    id    String @id @default(cuid())
    title String
    year  Int

    overview              String
    runtime               Int
    country               String?
    trailer               String?
    homepage              String?
    status                String
    rating                Float
    votes                 Int
    commentCount          Int
    language              String
    availableTranslations String[]
    genres                String[]
    certification         String?
    people                String[]

    // movie specific
    tagline  String?
    released DateTime? // date only

    // tv specific
    firstAired    DateTime? // date and time
    airsDay       String?
    airsTime      String?
    airsTimezone  String?
    airedEpisodes Int?
    network       String?

    mediaIds   MediaIds @relation(fields: [mediaIdsId], references: [id])
    mediaIdsId String   @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([title, year])
}

model WatchHistory {
    id String @id @default(cuid())

    user   User   @relation(fields: [userId], references: [id])
    userId String @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
